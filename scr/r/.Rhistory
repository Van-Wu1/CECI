library(sf)
library(igraph)
library(tidyverse)
edge_path <- "../data/Roads/london_edges.geojson"
node_path <- "../data/Roads/london_nodes.geojson"
edges <- st_read(edge_path)
nodes <- st_read(node_path)
names(edges)
names(nodes)
# === 构建 igraph 网络（用 u / v / osmid）===
g <- graph_from_data_frame(
d = edges %>% st_drop_geometry() %>% select(from = u, to = v),
vertices = nodes %>% st_drop_geometry() %>% rename(name = osmid),
directed = FALSE
)
if (!require(pbapply)) install.packages("pbapply")
library(pbapply)
# 创建节点列表
nodes_list <- V(g)
# 改为带进度的 betweenness
betw_cent <- pbapply::pbsapply(nodes_list, function(v) betweenness(g, v = v, normalized = TRUE))
install.packages("igraph")
library(sf)
library(igraph)
library(tidyverse)
edge_path <- "../data/Roads/london_edges.geojson"
node_path <- "../data/Roads/london_nodes.geojson"
edges <- st_read(edge_path)
nodes <- st_read(node_path)
names(edges)
names(nodes)
# === 构建 igraph 网络（用 u / v / osmid）===
g <- graph_from_data_frame(
d = edges %>% st_drop_geometry() %>% select(from = u, to = v),
vertices = nodes %>% st_drop_geometry() %>% rename(name = osmid),
directed = FALSE
)
if (!require(pbapply)) install.packages("pbapply")
library(pbapply)
# 创建节点列表
nodes_list <- V(g)
# 改为带进度的 betweenness
betw_cent <- pbapply::pbsapply(nodes_list, function(v) betweenness(g, v = v, normalized = TRUE))
clc
install.packages(c("igraph", "cppRouting", "sf", "tidyverse"))
library(sf)
library(tidyverse)
library(cppRouting)
install.packages("cppRouting")
library(sf)
library(tidyverse)
library(cppRouting)
edge_path <- "../data/Roads/london_edges.geojson"
edges <- st_read(edge_path)
# 如果需要的话，可以读入节点文件备用
# node_path <- "../data/Roads/london_nodes.geojson"
# nodes <- st_read(node_path)
names(edges)
# 构建 cppRouting 网络对象
# 需提供 from, to, weight 三列（通常使用 edge 长度）
rnet <- fastgraph(
from = edges$u,
to = edges$v,
d = edges$length,
directed = FALSE
)
library(sf)
library(tidyverse)
library(cppRouting)
find.package("cppRouting")
# 构建 cppRouting 网络对象
# 需提供 from, to, weight 三列（通常使用 edge 长度）
rnet <- fastgraph(
from = edges$u,
to = edges$v,
d = edges$length,
directed = FALSE
)
